# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: build-native-image

on:
  push:
    tags:
      - "v*"
    branches: [ main ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: DeLaGuardo/setup-graalvm@5.0
        with:
          # GraalVM version, no pattern syntax available atm
          graalvm: '21.0.0.2'
          # Java version, optional, defaults to 'java8'. Available options are 'java8' and 'java11'.
          java: 'java11'
          # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
          arch: 'amd64'
      - name: gu-install-native-image
        run: gu install native-image
      - name: mvn
        run: mvn -Pnative clean -DskipTests package
      - name: upload-file
        id: upload-file
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./target/lb-local-proxy
#  build-macos:
#    runs-on: macos-11
#    steps:
#      - uses: actions/checkout@v2
#      - uses: DeLaGuardo/setup-graalvm@5.0
#        with:
#          # GraalVM version, no pattern syntax available atm
#          graalvm: '21.0.0.2'
#          # Java version, optional, defaults to 'java8'. Available options are 'java8' and 'java11'.
#          java: 'java11'
#          # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
#          arch: 'amd64'
#      - name: Build with Maven
#        run: gu install native-image && mvn -Pnative clean -DskipTests package
#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#          asset_path: ./lb-local-proxy
#          asset_name: lb-local-proxy-macos-11
#          asset_content_type: application/octet-stream
#  build-windows:
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: DeLaGuardo/setup-graalvm@5.0
#        with:
#          # GraalVM version, no pattern syntax available atm
#          graalvm: '21.0.0.2'
#          # Java version, optional, defaults to 'java8'. Available options are 'java8' and 'java11'.
#          java: 'java11'
#          # Architecture flag, optional, defaults to 'amd64'. Available options are 'amd64' and 'aarch64'. Later is available only for linux runners.
#          arch: 'amd64'
#      - name: 'Set up Visual C Build Tools Workload for Visual Studio 2017 Build Tools'
#        run: |
#          gu.cmd install native-image && choco install visualstudio2017-workload-vctools
#      - name: Build with Maven
#        run: mvn -Pnative clean -DskipTests package
#      - name: Upload Release Asset
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#          asset_path: ./lb-local-proxy.exe
#          asset_name: lb-local-proxy-windows-amd64
#          asset_content_type: application/octet-stream
